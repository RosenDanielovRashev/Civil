import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from io import StringIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
st.set_page_config(layout="wide")
st.title("üìå –ê–Ω–∞–ª–∏–∑ –Ω–∞ –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏")
st.write("–ó–∞—Ä–µ–¥–µ—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (ID,X,Y,Z) –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –µ–∫—Å–ø–æ—Ä—Ç")

# 1. –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª
uploaded_file = st.file_uploader("–ö–∞—á–µ—Ç–µ CSV/TXT —Ñ–∞–π–ª", type=['csv','txt'])
if not uploaded_file:
    st.stop()

# –ü—Ä–æ—á–∏—Ç–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
try:
    df = pd.read_csv(uploaded_file, header=None, names=['ID','X','Y','Z'])
except Exception as e:
    st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ —Ñ–∞–π–ª–∞: {e}")
    st.stop()

st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–¥–µ–Ω–∏ {len(df)} —Ç–æ—á–∫–∏")

# 2. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
col1, col2 = st.columns([2, 1])
with col1:
    st.subheader("3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    fig = go.Figure()
    fig.add_trace(go.Scatter3d(
        x=df['X'], y=df['Y'], z=df['Z'],
        mode='lines+markers',
        line=dict(color='royalblue', width=2),
        marker=dict(size=4, color='red'),
        name='–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è'
    ))
    st.plotly_chart(fig, use_container_width=True, height=600)

# 3. –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∫—Ä—ä–≥–ª–∏ –∫–æ—Ç–∏
with col2:
    st.subheader("–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ")
    step = st.number_input("–°—Ç—ä–ø–∫–∞ –∑–∞ Z-–∫–æ—Ç–∞", 
                         min_value=0.001, value=0.1, step=0.01,
                         help="–¢—ä—Ä—Å–∏ Z —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ç–Ω–∏ –Ω–∞ —Ç–æ–≤–∞ —á–∏—Å–ª–æ")
    
    tolerance = st.number_input("–î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (¬±)", 
                              min_value=0.0, value=0.001, step=0.001,
                              help="–î–æ–ø—É—Å–∫–æ–≤–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ")

    if st.button("–ü—Ä–∏–ª–æ–∂–∏ —Ñ–∏–ª—Ç—ä—Ä"):
        df['Z_rounded'] = (df['Z'] / step).round() * step
        filtered = df[np.abs(df['Z'] - df['Z_rounded']) <= tolerance]
        st.session_state.filtered_df = filtered

# 4. –ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ –¥–∞–Ω–Ω–∏
st.subheader("üì§ –ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ –¥–∞–Ω–Ω–∏")
export_type = st.radio("–ö–∞–∫–≤–∏ –¥–∞–Ω–Ω–∏ –¥–∞ —Å–µ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞—Ç:",
                      ["–í—Å–∏—á–∫–∏ —Ç–æ—á–∫–∏", "–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ —Ç–æ—á–∫–∏"])

if export_type == "–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ —Ç–æ—á–∫–∏" and 'filtered_df' not in st.session_state:
    st.warning("–ü—ä—Ä–≤–æ –ø—Ä–∏–ª–æ–∂–µ—Ç–µ —Ñ–∏–ª—Ç—ä—Ä!")
    st.stop()

export_df = st.session_state.filtered_df if export_type == "–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ —Ç–æ—á–∫–∏" else df

# –ò–∑–±–æ—Ä –Ω–∞ –∫–æ–ª–æ–Ω–∏
cols = st.multiselect("–ò–∑–±–µ—Ä–µ—Ç–µ –∫–æ–ª–æ–Ω–∏ –∑–∞ –µ–∫—Å–ø–æ—Ä—Ç",
                     export_df.columns.tolist(),
                     default=['ID','X','Y','Z'])

if cols:
    csv_data = export_df[cols].to_csv(index=False)
    st.download_button(
        label="‚¨áÔ∏è –°–≤–∞–ª–∏ CSV",
        data=csv_data,
        file_name=f"coordinates_{export_type.lower().replace(' ', '_')}.csv",
        mime="text/csv",
        help="–ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç CSV"
    )
else:
    st.warning("–ò–∑–±–µ—Ä–µ—Ç–µ –ø–æ–Ω–µ –µ–¥–Ω–∞ –∫–æ–ª–æ–Ω–∞ –∑–∞ –µ–∫—Å–ø–æ—Ä—Ç")

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
st.subheader("üóÉÔ∏è –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ")
st.dataframe(export_df[cols] if cols else export_df, height=300)
